= slide 'Днес' do
  list:
    Call stack
    Общ преглед на изключения
    `catch` и `throw`
    Структурата на една Ruby библиотека (skeptic)
    Накратко за четвърто предизвикателство

= slide 'Сбирки след лекцията в сряда' do
  list:
    Миналата сряда ходихме в Торонто на по бира
    Ще опитаме да го превърнем в традиция – тази сряда пак
    Споделихте ни много ценни неща, ще се радваме да си поговорим пак

= slide 'План за неделя, 16 ноември', 'традиционната планина' do
  list:
    Планираме я тази неделя, 16 ноември
    Има новина, тема във форума с още детайли и [събитие във Facebook](https://www.facebook.com/events/653949578054910/)
    Трябва да знаем кой ще идва, [отбележете се във Facebook](https://www.facebook.com/events/653949578054910/) или форума, когато разберете

= slide 'Новини за работни позиции с Ruby' do
  list:
    Често получавам(е) запитвания за хора с познания по Ruby (и Rails)
    Възможност да следите такива предложения
    Отделен информационен канал за целта (пощенски списък)
    [Новинарски бюлетин за предложения за работа с Ruby →](http://eepurl.com/KRzt5)
    Средно под един имейл на месец

= slide 'Помощници за седмични учебни групи' do
  list:
    Участвам в организацията на учебни групи, където учим начинаещи на уеб и програмиране
    Групите се срещат всяка седмица, с различни хора в четвъртък и петък
    Няколко човека сме инструктори там и помагаме на участниците да напредват
    Неангажираща и същевременно изключително интересна и предизвикателна дейност
    Търся помощник-инструктори; достатъчни са (някакви) познания по HTML, CSS и основи в Ruby
    Не забравяйте – начинаещи са

= slide 'Ориентировъчен план за следващите лекции' do
  list:
    12 ноември – Интроспекция и метапрограмиране, част 1
    17 ноември – Интроспекция и метапрограмиране, част 2
    19 ноември – Интроспекция и метапрограмиране, част 3
    24 ноември – Регулярни изрази
    26 ноември – Git
    3 декември – първи тест
    Code jam session – декември
    Web с Ruby, Sinatra, Ruby core & stdlib, конкурентност
    Каквото ви е интересно

= slide 'Въпрос 1' do
  p Кой е родителският клас на класа <code>StandardError</code>?

  .action.answer
    p <code>Exception</code>.

= slide 'Въпрос 2' do
  p Кой клас стои най-горе в йерархията на всички изключения (като не броим <code>Object</code>)?

  .action.answer
    p <code>Exception</code>.

= slide 'Въпрос 3' do
  p От какъв тип са изключенията, хвърлени така: <code>raise 'foo'</code>?

  .action.answer
    p <code>RuntimeError</code>.

= slide 'Въпрос 4' do
  p Как ще се оцени следният израз?

  example:
    begin
      raise 'oh noes!'
    rescue Exception
      'A general exception has occurred.'
    rescue StandardError
      'A standard error has occurred.'
    end

  .action.answer
    p На низа <code>"A general exception has occurred."</code>. Изключението се хваща от първия <code>rescue</code>, който споменава клас <code>exception_class</code>, за който е вярно, че <code>exception.is_a?(exception_class)</code>.

= slide 'Call stack' do
  list:
    Нещо, което практически всеки език за програмиране осигурява и всяка програма използва
    Пази реда на извикване на определени вложени методи и "указател" към техните аргументи и локални променливи
    Бездънната рекурсия – извикване на нови и нови методи, без старите извиквания да са приключили – го препълват
    Има място за N на брой вложени извиквания (например, 65к)
    Всеки ред код в Ruby се намира някъде в този стек

= slide 'Достъп до call стека' do
  list:
    Методът `caller` връща списък с низове, които показват къде сме в текущия call стек
    Показват имената на методите, които са извиквани, в обратен на извикването ред
    В кой файл е станало извикването
    На кой ред във файла

= slide 'puts с много аргументи', 'лирическо отклонение' do
  list:
    Може да извикате `puts` с нула или повече аргумента
    Извикване с нула аргумента ще изведе на екрана нов ред
    Извикване с три аргумента ще изведе трите неща на отделен ред
    Ако някой от аргументите е списък, елементите на списъка ще бъдат изведени на отделни редове
    `puts :foo, [:bar, :baz]` ще изведе `foo`, `bar` и `baz` на три отделни реда

= slide 'Пример за call stack' do
  example:
    # inception.rb:
    def roll_the_ball()         go_deep               end
    def go_deep()               we_need_to_go_deeper  end
    def we_need_to_go_deeper()  even_deeper_than_that end
    def even_deeper_than_that() puts(caller)          end

    roll_the_ball

  p Изпълняваме го с <code>ruby inception.rb</code>.

= slide 'Пример за call stack - резултат' do
  p Примерът от предния слайд ще продуцира:

  pre
    ' inception.rb:3:in `we_need_to_go_deeper'
      inception.rb:2:in `go_deep'
      inception.rb:1:in `roll_the_ball'
      inception.rb:6:in `&lt;main&gt;'

= slide 'Call стекът обикновено е по-дълбок', '(съкратен) пример от irb' do
  pre
    ' > puts caller
      .../irb/workspace.rb:86:in `eval'
      .../irb/workspace.rb:86:in `evaluate'
      .../irb/context.rb:380:in `evaluate'
      .../irb.rb:492:in `block (2 levels) in eval_input'
      .../irb.rb:624:in `signal_status'
      .../irb.rb:489:in `block in eval_input'
      .../irb/ruby-lex.rb:247:in `block (2 levels) in each_top_level_statement'
      .../irb/ruby-lex.rb:233:in `loop'
      .../irb/ruby-lex.rb:233:in `block in each_top_level_statement'
      .../irb/ruby-lex.rb:232:in `catch'
      .../irb/ruby-lex.rb:232:in `each_top_level_statement'
      .../irb.rb:488:in `eval_input'
      .../irb.rb:397:in `block in start'
      .../irb.rb:396:in `catch'
      .../irb.rb:396:in `start'
      .../bin/irb:11:in `<main>'
      => nil

= slide 'Изключения като цяло' do
  list:
    Изключенията са механизъм за обработка на грешки
    Придвижвате се нагоре (bubble-up-ват) по call стека от мястото на възникване, докато бъдат хванати или стекът свърши
    Затова позволяват разделяне обработката на грешктите от мястото, където са възникнали
    Ако никой не ги хване нейде по стека, програмата ви умира

= slide 'Основни атрибути' do
  p Изключенията в Ruby са обекти като всичко останало – инстанции на клас <code>Exception</code> или негов наследник.
  p Имат три основни атрибута:

  list:
    Tип (клас) – `KeyError`, `RuntimeError`, `NoFriendsException` – за автоматична обработка
    Tекстово съобщение – "undefined local variable or method `foo' for main:Object" – за хора
    Backtrace (call stack trace) – отпечатване на мястото в call стека, където се е случила грешката – отново за хора

= slide 'Основни атрибути (2)' do
  p Нека имаме инстанция на изключение в променлива <code>error</code>. Тогава:

  list:
    Tипът (класът) достъпваме с `error.class` (както и всеки друг Ruby обект)
    Съобщението с `error.message`
    Backtrace (call stack trace) – `error.backtrace`
    Има и още няколко метода, вижте [документацията на `Exception`](http://ruby-doc.org/core-2.1.4/Exception.html)

= slide 'Някои вградени изключения' do
  example:
    foo               # NameError: undefined local variable or method `foo' for main:Object
    1 / 0             # ZeroDivisionError: divided by 1
    File.open         # ArgumentError: wrong number of arguments (0 for 1..3)
    File.open('/Ah?') # Errno::ENOENT: No such file or directory @ rb_sysopen - /Ah?

  .action
    p Между другото, <code>Errno::ENOENT</code> си е нормално изключение:

    example:
      Errno::ENOENT.ancestors.take_while { |kind| kind != Object }
      # => [Errno::ENOENT, SystemCallError, StandardError, Exception]

= slide 'Наши собствени изключения' do
  p За да си направим клас-изключение, обикновено наследяваме от <code>RuntimeError</code> или <code>StandardError</code>:

  example:
    class NoFriendsError < StandardError
    end

  list:
    Обикновено тези класове са празни
    Нужната функционалност я получаваме наготово от `Exception`
    Съществуват само за разграничение по тип

= slide 'Как да ползваме изключения' do
  p Може да разделим изключенията на два основни вида.

  ol
    li Непредвидими грешки, причинени от "околната среда".
    li Програмистки грешки, причинени от неправилна употреба на парче код.

= slide 'Непредвидими грешки' do
  list:
    Изчерпано дисково пространство, мрежови грешки, неправилни входни данни от потребител и прочее
    Обикновено се прихващат с <code>rescue</code> от нас или от ползвателите на нашия код
    Програмата реагира по някакъв начин – информира потребителя, пише в лог файл, прави повторни опити след време...

= slide 'Програмистки грешки' do
  list:
    Не трябва да се хващат – трябва програмата да гръмне
    Неправилна употреба на даден код – грешни/липсващи аргументи и прочее
    Спазва се принципът "fail early"

= slide 'Какво да хващаме?' do
  list:
    Възможно по-малко, от конкретен тип
    Точно поради горепосочените причини, е много вредно да хващате `Exception` или да обгръщате огромни части от програмата си с `begin ... rescue Exception`

= slide 'Изключения в блиблиотеки' do
  blockquote
    ' It is recommended that a library should have one subclass of StandardError or RuntimeError and have specific exception types inherit from it. This allows the user to rescue a generic exception type to catch all exceptions the library may raise even if future versions of the library add new exception subclasses.

= slide 'Изключения в блиблиотеки (2)' do
  list:
    Правите си клас, наследяващ от, да кажем, `RuntimeError`
    `class Skeptic::Error < RuntimeError; end`
    Всички останали изключения във вашата библиотека наследяват от този клас
    За "програмистки" грешки е окей да ползвате вградените класове (`ArgumentError`, `NotImplementedError` и прочее)
    Възникването на такива грешки е знак за грешна употреба на вашия код и е важно да се видят рано (по време на разработка и тестване, а не в production)

= slide 'catch и throw' do
  list:
    Сходни на `raise` и `rescue`
    Не ползват изключения вътрешно
    Служат за предаване на информация по стека (control flow)

= slide 'catch и throw' do
  annotate:
    def iterate_pairs(hash)
      hash.values.each { |array| iterate_values array }
    end

    def iterate_values(array)
      array.each do |item|
        if item == 'Nemo'
          puts 'Found Nemo!'
          throw :done
        end
      end
    end

    animals = {cats: %w[Simba], fish: %w[Crispy Nemo], boars: %w[Pumba]}
    catch(:done) { iterate_pairs(animals) }

  p Този пример е доста синтетичен.

= slide 'catch и throw', 'накратко' do
  list:
    `catch` приема символ и блок.
    Нещо в блока може да извика `throw` със същия символ.
    Когато това стане, Ruby започва да търси обратно по стека до съответния `catch`.
    Когато бъде намерен, изпълнението продължава след `catch`-а.
    `throw` взема допълнителен аргумент, който е върнатата стойност на `catch`.
    Ако няма `throw`, стойността на `catch` е последния оценен израз.

= slide 'Всички възможни аргументи на метод', 'лирическо отклонение с елементи на преговор' do
  example:
    def an_example_of_great_method_design(
      a,
      _,
      _,
      b,
      c = :something,
      *splat,
      d,
      (e, f),
      keyword:,
      with_default: 'value',
      **other_keyword_args,
      &some_block
    )
    end

= slide 'Всички възможни аргументи на метод (2)' do
  list:
    Не може да имате аргумент със стойност по подразбиране след splat
    Може да ползвате скоби за "деструктивно" присвояване (разпадане на списък)
    Такъв метод е очевидно лоша идея
    Едно от правилата на [Sandi Metz](http://www.sandimetz.com/) е "не повече от 4 аргумента на метод"
    В горното се броят и keyowrd аргументи, както и ключовете в аргументи тип `options = {}`

= slide 'Sandi Metz' do
  p Като споменахме Санди...

  blockquote.action
    ' I'm the author of Practical Object-Oriented Design in Ruby (POODR). I believe in simple code and straightforward explanations. I want to help you transform your code and make the pain go away.

  list:
    Тя е едно от най-известните имена в Ruby community-то
    Погледнете [сайта ѝ](http://www.sandimetz.com/)
    Следвайте я

= slide 'Code spelunking: skeptic' do
  p Гмуркане в дълбините на skeptic, за да разберем как работи и как да правим това с други библиотеки.

= slide 'Четвърто предизвикателство', 'тъжната действителност' do
  p Искахме от вас нещо просто:

  example:
    remove_duplicates [-1, 4, -1, 33, 33, 42, 4] # [-1, 4, 33, 42]

  list:
    Google търсене за "ruby unique numbers in array" вади един [StackOverflow въпрос](http://stackoverflow.com/questions/8365721/remove-duplicate-elements-from-array-in-ruby) с едно от възможните решения
    Това не е лошо – пак сте научили нещо :)
    Само едно решение не взима точка; дълго е 44 реда и се чупи в един от четирите теста

= slide 'Четвърто предизвикателство - добри решения (1)' do
  p Едно от възможните добри решения:

  example:
    def remove_duplicates(integers)
      integers.each_with_object([]) do |integer, uniques|
        uniques << integer unless uniques.include? integer
      end
    end

  list:
    Обърнете внимание на именуването – `integers`

= slide 'Четвърто предизвикателство - добри решения (2)' do
  p Още един вариант:

  example:
    def remove_duplicates(integers)
      integers & integers
    end

  .action
    p Някои вариации на горното:

    example:
      def remove_duplicates(integers) integers | integers end
      def remove_duplicates(integers) [] | integers end

= slide 'Четвърто предизвикателство - добри решения (3)' do
  p Частично приемливо:

  example:
    def remove_duplicates(integers)
      integers.to_set.to_a
    end

  p.action Проблеми с това решение:
  list:
    Изисква `require 'set'`
    Разчита, че `Set` използва вътрешно `Hash`, като `Hash` пази наредбата си
    Проблемът е, че `Hash` пази тази наредба по спецификация, докато за `Set` не пише такова нещо в документацията

= slide 'Четвърто предизвикателство - добри решения (4)' do
  p Както и това:

  example:
    def remove_duplicates(integers)
      integers.group_by { |integer| integer }.keys
    end

= slide 'Четвърто предизвикателство - добри решения (5)' do
  p Приемливо, защото е прост, праволинеен и очакван начин за решение на проблема:

  example:
    def remove_duplicates(integers)
      uniques = []
      integers.each { |integer| uniques << integer unless uniques.include?(integer) }
      uniques
    end

= slide 'Четвърто предизвикателство - проблеми' do
  list:
    Всичко останало, което сте правили, извън тези варианти, е излишно
    Може да се приеме и за грешно
    Твърде много грешки, просто няма да има време да разгледаме всички
    [Прегледайте решенията](/challenges/4) и вижте какво не трябва да се прави

= slide 'Четвърто предизвикателство - проблеми' do
  p Най-общо:

  list:
    За съжаление, все още проблеми с идентация и конвенции
    Лошо именуване (на места много лошо)
    Излишни неща (`hash[:foo] += 1` вместо `hash[:foo] = true`)
    Невладеене на `Enumerable`
